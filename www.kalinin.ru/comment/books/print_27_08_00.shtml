<html><head><title>ALK :: Книги :: "C и C++. Правила программирования."</title>
</head>
<body bgcolor="white" text="black">
<a href="http://counter.rambler.ru/top100/"><img align="left" src="http://counter.rambler.ru/top100.cnt?160852" alt="Rambler's Top100 Service" width=1 height=1 border=0></a>
Этот текст распечатан с домашней странички Андрея Калинина 
(<a href="http://www.kalinin.ru">www.kalinin.ru</a>).<br>
Оригинал статьи находится по этому адресу: <a href="http://www.kalinin.ru/comment/books/27_08_00.shtml">http://www.kalinin.ru/comment/books/27_08_00.shtml</a><br>
<hr>
<br>

<h1>C &amp; C++: правила программирования
</h1>
<p align="right">27.08.00</p>
 
    <p align="justify">
      Еще одна книга по C и C++, о которой мне хотелось
      бы рассказать. Она совсем тоненькая и маленькая, всего 270
      страниц. Сейчас она стоит в Библио-Глобусе 15 (!) рублей, судя
      по всему из-за того что выпущена в 1996 году тиражом в 11000 экземпляров.
      Несмотря на такую смешную цену (по отношению к другим книгам
      по C/C++) ее очень сложно переоценить.
    </p>
    <p align="justify">
      Все дело в том, что эта книга является попыткой автора (профессионального
      программиста) передать свой опыт другим программистам. В книге действительно
      находятся правила (общим количеством 161), некоторые из них
      спорны, но все они являются теми выводами, к которым (или к подобным)
      приходит программист с каждой тысячей строчек кода (написанных самостоятельно,
      прочитанных или просто "продуманных"). 
    </p>
    <p align="justify">
      Вообще я заметил, что каждый программист приходит, в основном, к одим
      и тем же выводам, т.е., можно предположить, что если человек придет,
      прочитает какую-нибудь книжку по C/C++ с тем, что бы ознакомиться с синтаксисом,
      а затем прочитает "правила программирования", то он сэкономит массу времени и нервов потому что
      сразу же "перепрыгнет несколько ступенек".
    </p>
    <p align="justify">
      Это только на первый вгляд. "Правила программирования" мне посоветовали прочитать
      (это было несколько месяцев назад и я только сейчас удосужился это сделать) со словами
      "два года назад я пытался ее прочитать и ничего в ней не понял, зато
      недавно перечитал с громадным удовольствием". Это очень правильные слова --- потому
      что ценность книги поймут только те, для кого подобные правила не пустой звук.
    </p>
    <p align="justify">
      Хочу сразу сказать, что с некоторыми правилами я не согласен (т.е., по некоторым
      рассуждениям автора у меня имеется совершенно иное мнение), но это терпимо. В основном
      же я пришел примерно к таким же утверждениям, только никогда их не формулировал
      для себя в столь ясном виде. Я думаю, это полезно --- иметь подобную книжку, потому
      что чтение правил позволяет более упорядочить свои представления о совершенстве в 
      программировании.
    </p>
    <p align="justify">
      Но перейду непосредственно к комментированию. Правила разделены по тематике: 
    </p>
    <ul>
      <li>процесс проектирования;</li>
      <li>общие проблемы разработки программ;</li>
      <li>форматирование и документация;</li>
      <li>имена и идентификаторы;</li>
      <li>общие правила программирования;</li>
      <li>препроцессор;</li>
      <li>правила, относящиеся к языку C;</li>
      <li>правила программирования на C++.</li>
    </ul>
    <p align="justify">
      Ну что тут можно сказать... читать --- удовольствие, потому что все утверждения
      вполне разумны. 
    </p>
    <p align="justify">
      Правило 6 гласит: "если вы не можете выразить что-то на повседневном
      языке, то вы не сможете сделать это на C/C++":
    </p>
<table align="center" border="0" cellspacing="0" cellpadding="5" width="60%">
<tr><<td bgcolor="#cccccc" width="100%" nowrap>Цитата</td></tr>
<tr><td></td></tr>
<tr>
<td colspan="2" width="100%">
    <p align="justify">
      Акт записи на обычном языке описания того, что делает программа,
      и что делает каждая функция в программе, является критическим шагом
      в мыслительном процессе. Хорошо построенное, грамматически правильное предложение ---
      признак ясного мышления. Если вы не можете это записать, то велика вероятность того,
      что вы не полностью продумали задачу или метод ее решения.
    </p>
</td></tr>
</table>
    <p align="justify">
      Это настолько разумно, что мне нечего добавить к этому. Вообще, часть книги, которая не 
      относится к языкам программирования C/C++, а посвящена программированию вообще,
      имеет свою отдельную ценность даже для тех программистов, кто не использует C/C++
      в повседневной жизни.
    </p>
    <p align="justify">
      Правило 25: "пропустите свой код через программу орфографической проверки". Я никогда
      не делал этого, но, честно говоря, очень часто у меня появлялись подобные мысли...
      зачастую очень тяжело читать код, когда постоянно натыкаешься на орфографические
      ошибки. Это раздражает в комментариях, но совсем становится несносно в идентификаторах.
    </p>
    <p align="justify">
      Кстати сказать. Понятно, что автор --- иностранец, и поэтому не затрагивал 
      проблему использования в идентификаторах других языков, но мне хочется это 
      добавить... слово, записанное транслитом смотрится просто ужасно. Один мой
      знакомый программист жаловался как-то на то, что очень долго не мог понять,
      что делает функция <code>izbotirr()</code>, написанная другим программистом (комментариев
      они не делали абсолютно, потому что очень торопились; кстати сказать, из-за
      того что они торопились, они опоздали на год). Оказалось, что это (барабанная
      дробь) "избавиться от иррациональности" (всеобщее изумление). Кстати, этот идентификатор
      нарушает еще одно правило из книги: "избегайте аббревиатур". Это правильно,
      потому что хорошо названый идентификатор скажет больше, чем самый лучший
      комментарий.
    </p>
    <p align="justify">
      Мне очень понравился комментарий автора к "венгерской" нотации (это та, которая
      используется программистами, начинавшими с использованием
      Windows SDK, т.е. когда в название переменной включается ее тип, например <code>lpzstr</code>).
      Автор книги совершенно прав, говоря следующее:
    </p>
<table align="center" border="0" cellspacing="0" cellpadding="5" width="60%">
<tr><<td bgcolor="#cccccc" width="100%" nowrap>Цитата</td></tr>
<tr><td></td></tr>
<tr>
<td colspan="2" width="100%">
    <p align="justify">
      Венгерская запись дает многое для Ассемблера, в котором все, что вы знаете о переменной ---
      это ее размер. Включение информации о типе в имя переменной сразу говорит о ее
      использовании. В этих целях языки более высокого уровня, как C и C++, используют
      объявление переменных. 
    </p>
    <p align="justify">
      Доктор Саймони (автор венгерской записи) несколько раз защищал
      такую нотацию в своих публикациях, но я не хотел бы рекомендовать
      это для вас в применении к C или C++. По моему мнению,
      венгерская нотация не дает ничего, кроме ухудшения читаемости 
      программ. Простые <code>str</code> или <code>string</code> 
      значительно легче читаются и содержат ту же информацию. Если 
      вам на самом деле нужно узнать тип, то для этого достаточно вернуться
      к определнию.
    </p>
</td></tr>
</table>
    <p align="justify">
      Честно говоря, я никогда не мог смотреть без содрогания на 
      код в венгерской нотации. И никогда не понимал, почему это вдруг
      названия классов начинаются с <code>T</code> или <code>C</code> ---
      все лишнее только ухудшает читабельность программы. Кстати, я обычно
      придерживаюсь того правила, что названия классов начинается с "большой"
      буквы, а переменных --- с маленькой. Кроме того, несмотря на то, что
      относительно недавно для переменных я предпочитал что-то в духе <code>someGoodVariable</code>,
      то теперь пишу <code>some_good_variable</code>, потому что разделение
      подчеркиваниями значительно лучше читается.
    </p>
    <p align="justify">
      Или вот такая цитата:
    </p>
<table align="center" border="0" cellspacing="0" cellpadding="5" width="60%">
<tr><<td bgcolor="#cccccc" width="100%" nowrap>Цитата</td></tr>
<tr><td></td></tr>
<tr>
<td colspan="2" width="100%">
    <p align="justify">
      Тут вообще нет ничего неверного при присваивании в цикле:
    </p>
<pre>
        while(p = f())
            g(p);
</pre>
    <p align="justify">
      Даже если новичок в программировании может воспользоваться
      символом = вместо ==. (Трудности новичков не должны приниматься
      во внимание, когда вы обсуждаете рекомендуемый стиль для профессионалов.
      Это похоже на принятие закона, который требует, чтобы все велосипеды
      оснащались боковыми колесиками, потому что двухлетним малышам без
      них тяжело кататься.)
    </p>
</td></tr>
</table>
    <p align="justify">
      В общем, я просматривал книгу в поисках цитат с начала и прошел первую
      треть... все дело в том, что тут непонятно, что именно в ней выделяется
      настолько, что надо цитировать --- ощущается желание процитировать все.
      Тем не менее, надеюсь, я дал вам представление об этой, не скрою, замечательной
      книге.
    </p>

<h2>Резюме</h2>
    <p align="justify">
      Книга будет несомненно полезна всем, кто знает C++. Т.е., даже не столько
      полезна, сколько интересна тем, что в ней собрана такая структура реальных
      правил программирования.
    </p>
    <p align="justify">
      Думаю, что книга будет интересна даже программистам на других языках, кроме C и
      C++. Единственное, не могу ее советовать для людей, которые только-только начали
      программировать. Купить ее, наверно, стоит (для того что бы прочитать попозже),
      но в начале она будет непонятна.
    </p>	



<h2>Ссылки по теме</h2>


<table width="100%" border="0" cellspacing="0" cellpadding="5">
<tr><td><a href="http://www.cs.umd.edu/users/cml/cstyle/" target="_blank">http://www.cs.umd.edu/users/cm</a></td>
<td width="100%">
     C and C++ Style Guides.
</td></tr>
<tr><td><a href="http://corelinux.sourceforge.net" target="_blank">http://corelinux.sourceforge.n</a></td>
<td width="100%">
     Сайт, посвященный (в частности) формализации требований к тексту программ на C++.
</td></tr>
</table>


<hr>
&copy;2000-2001 by Andrey L. Kalinin, 
<a href="http://counter.rambler.ru/top100/" alt="Rambler's Top100" target="_blank"><img align=right src="http://images.rambler.ru/top100/banner-88x31-rambler-black2.gif" border=0 width=88 height=31></a>
<br>
andrey@kalinin.ru
</body>
</html>
