<html><head><title>ALK :: Сети :: Введение в CORBA.</title>
</head>
<body bgcolor="white" text="black">
<a href="http://counter.rambler.ru/top100/"><img align="left" src="http://counter.rambler.ru/top100.cnt?160852" alt="Rambler's Top100 Service" width=1 height=1 border=0></a>
Этот текст распечатан с домашней странички Андрея Калинина 
(<a href="http://www.kalinin.ru">www.kalinin.ru</a>).<br>
Оригинал статьи находится по этому адресу: <a href="http://www.kalinin.ru/programming/network/14_01_01.shtml">http://www.kalinin.ru/programming/network/14_01_01.shtml</a><br>
<hr>
<br>

<h1>Обзор CORBA
</h1>
<p align="right">14.01.01</p>
 
    <p align="justify">
      CORBA (расшифровывается как Common Object Request Broker)
      это технология, которая позволяет рассматривать 
      компоненты распределенной системы как объекты,
      отвечающие некоторым определенным интерфейсам. Эта
      технология дает возможность единым образом конструировать
      эти интерфейс при помощи специального декларативного
      языка IDL (Interface Definition Language). При этом
      интерфейс и его описание не зависит от используемого
      языка программирования, операционной системы или архитектуры
      процессора. Таким образом, один объект может быть написан
      на C++, другой --- на Java, и эта два объекта могут
      успешно друг с другом взаимодействовать и при этом
      не заботиться о формате данных (например, представления
      целых чисел или символов). 
    </p>
    <p align="justify">
      Эта возможность очень удобна для программистов, потому
      что используя такой подход можно конструировать взаимодействие
      между распределенными объектами при помощи тех же средств, которые
      применяются для описания взаимосвязей обычных объектов в пределах
      одной программы на одном компьютере. Популярные 
      CASE-средства, такие как Rational Rose, WithClasses или Together,
      позволяют создавать UML-схемы и экспортировать их в
      описания интерфейсов IDL.
    </p>
    <p align="justify">
      Основой технологии CORBA является ORB (Object Request Broker) --- 
      нечто, что позволяет передавать сообщения от одного объекта к другому.
      Это "нечто" может быть реализовано в виде библиотеки, специального
      сетевого сервиса, объектно-ориентированной СУБД или уже быть
      включенным в операционную систему. ORB дает возможность не задумываться
      объектам, которых он обслуживает, о том, где находятся 
      другие объекты, которым передаются сообщения. Кроме того,
      он скрывает все детали реализации объектов, оставляя
      снаружи только их интерфейсы. 
    </p>
    <p align="justify">
      Под названием "реализация CORBA", по сути, понимается
      как раз наличие конкретного ORB и средств для общения с ним.
      Кроме того, в реализацию CORBA входят дополнительные утилиты,
      такие как транслятор интерфейса, написанного на IDL,
      в код, который будет обеспечивать поддержку сетевых средств 
      CORBA в конкретном языке программирования (например,
      Java или C++). Таким образом, один ORB обеспечивает средства
      для общения объектов, написанных при помощи средств,
      с ним поставляемым.
    </p>
    <p align="justify">
      Это все не было бы так интересно, если бы отсутствовала возможность
      взаимного использования объектов, написанных и существующих
      в сети при посредстве различных ORB. Эта возможность
      существует и достигается она при помощи специального
      протокола взаимодействия между ORB, что позволяет передавать сообщения
      и запросы
      от одного ORB к другому. Поэтому есть
      возможность вызывать методы любого объекта, который существует
      на данный момент в сети. 
    </p>
    <p align="justify">
      Каждый объект определяется специальной
      ссылкой на него. Эта сслыка служит аналогом указателя
      в терминологии обычных языков программирования. Для того, чтобы
      получить доступ к некоторому объекту, сначала необходимо каким-то
      образом узнать ссылку на него. Удобным является то, что 
      существуют средства преобразования ссылки в строку и обратно.
      Подобная строка едина для всех ORB и позволяет уникальным
      образом идентифицировать объект. Опять же, было бы не особенно
      удобным пользоваться этой услугой, если бы не существовало средств
      для получения ссылок на объекты через их наименования, интерфейсы 
      и т.п. 
    </p>
    <p align="justify">
      Одной из самых главных черт технологии CORBA является
      полное скрытие деталей реализации. Об этом уже написано
      выше, но хотелось бы еще раз подчеркнуть это свойство. 
      Используя CORBA, пользователь некоторого объекта
      видит перед собой только описание интерфейсов
      объекта в виде IDL, например:
    </p>
<pre>
interface Random {

    // return non-negative long 
    // integer in the interval [0, 2^31)
    long lrand48();

    // return signed long integer 
    // in the interval [-2^31, 2^31)
    long mrand48();
};
</pre>
    <p class="table">
      Это реальный интерфейс демонстрационного объекта,
      доступный по адресу random.org. Объект
      идентифицируется строкой
    </p>
<pre>
IOR:000000000000000f49444c3a52616e646f6d3
a312e300000000000010000000000000050000100
0000000016706c616e7874792e6473672e63732e7
463642e69650006220000002c3a5c706c616e7874
792e6473672e63732e7463642e69653a52616e646
f6d3a303a3a49523a52616e646f6d00
</pre>
    <p class="table">
      и позволяет получить случайное число. Смотря на эти данные,
      пользователь объекта ничего не знает о том, как
      устроен генератор случайных чисел, на каком языке
      программирования он написан и где находится. Но после
      некоторых предварительных действий в своей программе (инициализация
      ORB) он может использовать этот генератор случайных
      чисел как обычный объект, который написан на
      используемом языке программирования:
    </p>
<pre>
for(int i = 0; i &lt; 10; i++)
   printf("%li\n", obj-&gt;lrand48();
</pre>
    <p align="justify">
      Вообще говоря, клиент может вообще сначала не знать
      интерфейса объекта, который пытается использовать.
      Средствами ORB можно узнать этот интерфейс во время
      выполнения (без IDL) и сгенерировать запрос
      к объекту на основе его интерфейса.
    </p>
    <p align="justify">
      Таким образом, CORBA дает возможность прозрачного
      использования различных объектов, вне зависимости
      от их месторасположения и используемого языка программирования.
      Это очень удобно, поскольку при помощи CORBA для
      написания распределенной программной системы от
      программиста не требуется знаний сетевых протоколов
      или заботы об исключительных ситуациях. 
    </p>
    <p align="justify">
      Но... как обычно, и у этой технологии есть свои
      недостатки. Прежде всего, за все удобства надо расплачиваться.
      Использование CORBA более ресурсоемко, чем использование
      менее "удобных" технологий, например, интерфейса сокетов.
      Кроме того, как мне кажется, CORBA становится слишком
      перегружена заложенными в нее возможностями. Понятно, что 
      большая часть задач решается при помощи CORBA без
      использования всех ее возможностей, но их количество
      ведет к усложнению реализаций и, как следствие, к большему
      количеству ошибок. В дополнение еще можно сказать о том,
      что CORBA относительно молодая (относительно того же интерфейса
      сокетов), поэтому значительно менее "обкатанная" технология. 
    </p>

<h2>Резюме</h2>
    <p align="justify">
      На мой взгляд, CORBA является весьма перспективной технологией, но
      на текущий момент я бы не стал рекомендовать ее к использованию. Связано
      это просто с отсутствием доверия к ее реализациям и сомнением в быстродействии.
    </p>




<h2>Ссылки по теме</h2>


<table width="100%" border="0" cellspacing="0" cellpadding="5">
<tr><td><a href="http://www.corba.org" target="_blank">http://www.corba.org</a></td>
<td width="100%">
     Официальный сайт CORBA.
</td></tr>
<tr><td><a href="http://www.omg.org" target="_blank">http://www.omg.org</a></td>
<td width="100%">
     Официальный сайт OMG.
</td></tr>
<tr><td><a href="http://www.mico.org" target="_blank">http://www.mico.org</a></td>
<td width="100%">
     Официальный сайт MICO (Mico Is COrba), реализация CORBA 2.3 для C++, распространяемая     по лицензии GPL. Очень хорошая документация, содержащая подробно прокомментированные     примеры; рекомендую знакомиться с CORBA именно по этой документации.
</td></tr>
<tr><td><a href="http://www.cetus-links.org/oo_corba.html" target="_blank">http://www.cetus-links.org/oo_</a></td>
<td width="100%">
     Коллекция ссылок по CORBA на сайте Cetus links.
</td></tr>
<tr><td><a href="http://random.org" target="_blank">http://random.org</a></td>
<td width="100%">
     Генератор "настоящих" случайных чисел.
</td></tr>
</table>


<hr>
&copy;2000-2001 by Andrey L. Kalinin, 
<a href="http://counter.rambler.ru/top100/" alt="Rambler's Top100" target="_blank"><img align=right src="http://images.rambler.ru/top100/banner-88x31-rambler-black2.gif" border=0 width=88 height=31></a>
<br>
andrey@kalinin.ru
</body>
</html>
