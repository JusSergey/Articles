<html><head><title>ALK :: XML :: Зачем же все-таки нужен XML.</title>
</head>
<body bgcolor="white" text="black">
<a href="http://counter.rambler.ru/top100/"><img align="left" src="http://counter.rambler.ru/top100.cnt?160852" alt="Rambler's Top100 Service" width=1 height=1 border=0></a>
Этот текст распечатан с домашней странички Андрея Калинина 
(<a href="http://www.kalinin.ru">www.kalinin.ru</a>).<br>
Оригинал статьи находится по этому адресу: <a href="http://www.kalinin.ru/programming/xml/02_08_00.shtml">http://www.kalinin.ru/programming/xml/02_08_00.shtml</a><br>
<hr>
<br>

<h1>Зачем же все-таки нужен XML
</h1>
<p align="right">02.08.00</p>
 
    <p align="justify">
      XML сейчас является очень модным словом --- обычно
      вместе с его упоминанием встречаются слова "метаязык",
      "перспективная технология" и прочее. Вообще,
      как только появляется что-то относительно
      новое или популярное, сразу же, как стервятники,
      слетаются различные "знатоки" и начинают
      умными словами рассказывать об этом. Вы знаете ---
      у меня всегда складывается такое впечатление,
      что чем больше ненужных умных слов человек употребит,
      тем менее он компетентен в рассматриваемом вопросе. Нет,
      "метаязык", это наверное, справедливо. Но обычно
      все статьи на русском языке, имеющие отношение
      к XML, носят такой восторженный характер, что 
      понять о чем говорит автор, очень сложно. Это,
      кстати, относится не только к XML, точно так же
      пишут о CORBA, COM+ и, к примеру, Active Directory в Win2000.
      Поверьте, я, когда случайно прочитал заметку об Active Directory,
      ничего не понял. После того как мне пришлось настраивать
      сеть под Win2000, я понял что автор статьи, наверняка, сам
      никогда Active Directory не пользовался и судит по ней
      только по рекламным проспектам. Собственно, по этим
      причинам я никогда не покупаю околокомпьютерных журналов
      и крайне редко их читаю; нет, там попадаются иногда
      вполне интересные статьи, но для этого приходится
      просматривать столько "воды", что становится жалко 
      потеряного времени.
    </p>
    <p align="justify">
      Но вернемся к XML. Неформально говоря, XML это всего лишь
      способ представления иерархической информации (т.е.
      некоторой древовидной структуры). В принципе, с такими
      представлениями программисты очень часто встречаются
      в своей работе, особенно когда приходится
      обмениваться данными подобного вида. В качестве примера можно 
      взять какую-нибудь учетную карточку... например, студента. Можно
      сказать, что учетные данные студента содержат: ФИО студента, 
      номер факультета, номер курса, номер учебной группы, данные об
      успеваемости. Данные об успеваемости содержат данные об обучении
      по каждому из прочитанных курсов. Данные о прочитанных
      курсах содержат набор пар [название курса, оценка полученную на экзамене].
    </p>
    <p align="justify">
      В качестве более сложных примеров можно привести математическую
      формулу, причем в двух разных вариантах: формула является
      набором математических символов и формула является либо
      уравнением, либо неравенством и т.д. Последнее "и т.д." подразумевает,
      что вместо того, что бы сохранять формулу в виде типографского
      набора литер, можно сохранить ее смысл (а по смыслу
      всегда можно сделать соответствующий набор литер).
    </p>
    <p align="justify">
      Каким конкретно образом XML представляет эти данные,
      я буду говорить чуть позже (в следующих заметках на эту тему). Сейчас же достаточно понять то,
      что при помощи XML можно эту иерархию записать и прочитать. "Ну и что?"
      спросите вы и будете совершенно правы, записать иеархическую
      структуру можно без всякого XML, пользуясь подручными
      кустарными средствами. Кроме всего прочего, XML позволяет
      задать грамматику для этой иерархической структуры, т.е. позволяет
      определить правила, по которым можно будет говорить о том,
      подпадает ли под эти правила конкрентный XML документ,
      или нет. Этот набор правил называется Document Type Definition (DTD).
      При его помощи можно контролировать правильность документа
      (иерархической структуры данных) без всяких знаний о конкретных
      данных. Это, согласитесь, уже что-то: автоматизировать
      процесс проверки конкретного документа ничего не стоит,
      соответственно, если, допустим ваша программа получает
      какие-то данные из разных, не всегда компетентных 
      в наборе этих данных,  источников, то всегда можно
      будет еще на стадии набора указать клиенту на то,
      что его данные ошибочны. Кроме того, такой подход (т.е.,
      написаное DTD) позволяет сторонним разработчикам 
      свободно писать программы для своих нужд, которые будут обмениваться
      данными с вашей программой. И, обратите внимание,
      все совершенно стандартно, с использованием известных
      библиотек и готовых интсрументальных средств. Это,
      согласитесь, уже немало.
    </p>
    <p align="justify">
      Кроме того, даже если вся эта структурность вам сейчас
      и не нужна, все равно стоит проделать эту работу. Потому
      что, во-первых, выделение структуры документа еще никому
      не вредило; во-вторых, это достаточно просто что бы
      это проделать; в третьих, если это не надо вам,
      то вполне может понадобиться кому-то другому; в четвертых,
      этот кто-то другой вполне может оказаться вами, а превращение
      груды неструктурированных данных в набор структурированных
      это, вообще говоря, очень тяжелая задача (нудная, если
      делать вручную, и сложная, если пытаться автоматизировать).
    </p>
    <p align="justify">
      Частный случай сторонней программы, которая будет
      уметь работать с вашим документом, является web-браузер.
      Современные браузеры умеют отображать XML документы
      на экране, т.е. у вас сразу же появится средство для
      визуализации. Кроме того, 
      принципиальная возможность использования таблиц стилей,
      позволяет очень просто изменять отображение
      на экране в соответствии с вашими требованиями. 
    </p>
    <p align="justify">
      Частным случаем пользы выделения структуры является
      обычный текст. Если его представить в виде 
      набора ASCII-символов, то этот текст
      сложно будет назвать книгой. Почему? А вы когда-нибудь
      видели распечатки инструкций, выполненные
      на старых принтерах? Где весь текст
      изображен одним и тем же моноширным шрифтом? А читать
      пытались? Я тоже. И, знаете, обычные книги было
      легче читать. Значительно. А все потому, что в 
      них было соответствующее оформление для заголовков, текста,
      примечаний и прочего. Текст, который, например, оформлен в 
      WinWord'е традиционно (нет, там можно использовать
      стили, но это обычно забывают) изобилует тем, что каждой
      букве жестко ставят в соответствие еще и ее оформление (шрифт, размер) ---
      это тоже нехорошо, потому что, во-первых, для того, что бы
      оформить документ надо обладать типографскими знаниями и, во-вторых,
      изменение вида подобного текста превращается в мучение.
    </p>
    <p align="justify">
      Текст же, в котором расставлены некоторые логические атрибуты, которые
      явным образом идентифицируют для программ, обрабатывающих
      этот текст, заголовки, примечания и обычный текст, сразу же
      позволяет удобным образом им пользоваться. Такой текст можно
      легко видоизменять, просто "играя" с соответствием логических
      и физических атрибутов (т.е., параметров шрифта); его
      можно просмотреть где угодно, даже на монохромных терминалах,
      и везде будут использоваться все возможные средства для
      того, что бы читать его было бы удобно;
      по такому тексту можно искать данные, ограничив некоторыми
      логическими зонами область поиска; с таким текстом
      легко автоматизировать работу (например, разбивку на страницы
      и автоматическую генерацию содержания). Все это позволяет
      сделать простая вещь: выделение структуры документа. А 
      выделить структуру стандартным образом позволяет использование
      XML.
    </p>

<h2>Резюме</h2>
    <p align="justify">
      XML позволяет стандартным образом обмениваться
      данными между программами или пользователями.
      При этом очень полезен тот факт, что это именно
      стандартный способ, потому что по этой причине
      становится возможным использование богатого
      набора средств, для работы с подобными представлениями
      данных. 
    </p>



<h2>Ссылки по теме</h2>


<table width="100%" border="0" cellspacing="0" cellpadding="5">
<tr><td><a href="http://www.w3.org/xml" target="_blank">http://www.w3.org/xml</a></td>
<td width="100%">
     Раздел на сайте W3C, посвященный XML.
</td></tr>
<tr><td><a href="http://www.xml.org" target="_blank">http://www.xml.org</a></td>
<td width="100%">
     Полезная информация и ссылки на тему XML.
</td></tr>
<tr><td><a href="http://www.xmlsoftware.com" target="_blank">http://www.xmlsoftware.com</a></td>
<td width="100%">
     Подборка программного обеспечения для работы с XML.
</td></tr>
</table>


<hr>
&copy;2000-2001 by Andrey L. Kalinin, 
<a href="http://counter.rambler.ru/top100/" alt="Rambler's Top100" target="_blank"><img align=right src="http://images.rambler.ru/top100/banner-88x31-rambler-black2.gif" border=0 width=88 height=31></a>
<br>
andrey@kalinin.ru
</body>
</html>
